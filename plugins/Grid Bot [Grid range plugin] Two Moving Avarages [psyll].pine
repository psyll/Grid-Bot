//@version=6
// Author: Psyll.com
// Email: info@psyll.com
// Website: https://psyll.com
// Copyright: Copyright Â© 2025 psyll.com. All rights reserved.
indicator('Grid Bot [Grid range plugin] Two Moving Avarages [psyll]', overlay = false)
ma(ma_type, ma_source, ma_length) =>
    float result = 0
    if ma_type == 'EMA'
        result := ta.ema(ma_source, ma_length)
        result
    if ma_type == 'SMA'
        result := ta.sma(ma_source, ma_length)
        result
    if ma_type == 'WMA'
        result := ta.wma(ma_source, ma_length)
        result
    if ma_type == 'HMA'
        result := ta.hma(ma_source, ma_length)
        result
    if ma_type == 'RMA'
        result := ta.rma(ma_source, ma_length)
        result
    if ma_type == 'VWMA'
        result := ta.vwma(ma_source, ma_length)
        result
    if ma_type == 'DEMA'
        result := 2 * ta.ema(ma_source, ma_length) - ta.ema(ta.ema(ma_source, ma_length), ma_length)
        result
    if ma_type == 'TEMA'
        result := 3 * (ta.ema(ma_source, ma_length) - ta.ema(ta.ema(ma_source, ma_length), ma_length)) + ta.ema(ta.ema(ta.ema(ma_source, ma_length), ma_length), ma_length)
        result
    if ma_type == 'ZLEMA'
        result := ta.ema(ma_source + ma_source - ma_source[(ma_length - 1) / 2], ma_length)
        result
    result
decimal_places = 0
tick_size = syminfo.mintick
while tick_size < 1
    tick_size := tick_size * 10
    decimal_places := decimal_places + 1
    decimal_places
settings_group = 'Settings #################################################'
ma_type = input.string('SMA', 'Type', options = ['SMA', 'EMA', 'WMA', 'HMA', 'RMA', 'VWMA', 'DEMA', 'TEMA', 'ZLEMA'], group = settings_group, display = display.none)
fastLength = input(10, title = 'Fast EMA Length', group = settings_group, display = display.none)
slowLength = input(20, title = 'Slow EMA Length', group = settings_group, display = display.none)
source = input.source(defval = close, title = 'Source', group = settings_group, display = display.none)
deviations = input(2.0, title = 'Number of Deviations', group = settings_group, display = display.none)
offset = input.float(1, 'Offset', group = settings_group, display = display.none)
width_min = input.float(0, 'Min width', group = settings_group, display = display.none)
width_max = input.float(99999, 'Max width', group = settings_group, display = display.none)
width_min_half = width_min / 2
width_max_half = width_max / 2
tf_group = 'Timeframe ###############################################'
tf_confirmation_wait = input.bool(defval = true, title = 'Wait for confirm', group = tf_group, inline = tf_group, display = display.none)
tf_no_repaint_security = input.bool(defval = true, title = 'No repaint', group = tf_group, inline = tf_group, display = display.none)
tf_barmerge_lookahead = input.bool(defval = false, title = 'Lookahead', group = tf_group, inline = tf_group, display = display.none)
tf_barmerge_gaps = input.bool(defval = false, title = 'Gaps', group = tf_group, inline = tf_group, display = display.none)
tf_type = input.string(title = 'Type', options = ['Static', 'Custom'], defval = 'Static', group = tf_group, display = display.none)
tf_static = input.timeframe(defval = '', title = 'Static', group = tf_group, display = display.none)
tf_custom = str.tostring(input.int(1, 'Custom', group = tf_group, display = display.none))
tf_type_value = switch tf_type
    'Static' => tf_static
    'Custom' => tf_custom
tf_security(source) =>
    request.security(syminfo.tickerid, tf_type_value, tf_no_repaint_security ? source[barstate.isrealtime ? 1 : 0] : source, gaps = tf_barmerge_gaps ? barmerge.gaps_on : barmerge.gaps_off, lookahead = tf_barmerge_lookahead ? barmerge.lookahead_on : barmerge.lookahead_off)[tf_no_repaint_security ? barstate.isrealtime ? 0 : 1 : 0]
display_group = 'Display ##################################################'
price_color = input.color(color.black, 'Candles color', display = display.none, group = display_group)
// Plot pricecandle
plotcandle(open, high, low, close, color = price_color, bordercolor = price_color, wickcolor = price_color, display = display.pane)
fastEMA = tf_security(ma(ma_type, source, fastLength))
slowEMA = tf_security(ma(ma_type, source, slowLength))
combinedEMA = (fastEMA + slowEMA) / 2
priceDeviation = deviations * tf_security(ta.stdev(combinedEMA, slowLength))
grid_high = combinedEMA + priceDeviation + offset
grid_low = combinedEMA - priceDeviation - offset
grid_middle = (grid_high + grid_low) / 2
if grid_high - grid_low < width_min
    grid_high := grid_middle + width_min_half
    grid_low := grid_middle - width_min_half
    grid_low
if grid_high - grid_low > width_max
    grid_high := grid_middle - width_max_half
    grid_low := grid_middle + width_max_half
    grid_low
plot(grid_high, 'High', color.green, display = display.all)
plot(grid_middle, 'Middle', color.silver, display = display.pane)
plot(grid_low, 'Low', color.red, display = display.all)
